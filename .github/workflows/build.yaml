name: rust

on:
  push:
    branches:
      - 'main'
  pull_request:

env:
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "-Dwarnings"
  CARGO_UNSTABLE_SPARSE_REGISTRY: true

jobs:
  rustfmt:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        rust:
          - nightly-2022-07-22
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          components: rustfmt
          override: true
      - uses: r7kamura/rust-problem-matchers@v1
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  markdown-lint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: xt0rted/markdownlint-problem-matcher@v2
      - uses: DavidAnson/markdownlint-cli2-action@v7
        with:
          globs: "**/*.md"

  size-label:
    runs-on: ubuntu-20.04
    # Trying to size a non pull request will error out failing the build
    if: ${{ github.event_name == 'pull_request' }}
    permissions:
      pull-requests: write
    steps:
      - name: size-label
        uses: "pascalgn/size-label-action@v0.4.3"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          IGNORED: "Cargo.lock"
          INPUT_SIZES: >
            {
              "0": "XS",
              "30": "S",
              "100": "M",
              "250": "L",
              "500": "XL",
              "1000": "XXL",
              "1500": "OHLAWDHECOMIN"
            }

  deny:
    runs-on: ubuntu-20.04
    needs:
      - "rustfmt"
      - "markdown-lint"
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources
    # Prevent sudden announcement of a new advisory from failing ci:
    continue-on-error: ${{ matrix.checks == 'advisories' }}
    steps:
    - uses: actions/checkout@v2
    - uses: EmbarkStudios/cargo-deny-action@v1
      with:
        command: check ${{ matrix.checks }}

  sort:
    runs-on: ubuntu-20.04
    needs:
      - "rustfmt"
      - "markdown-lint"
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-sort
          version: latest
          use-tool-cache: true
      # We run this manually because actions-rs/cargo doesn't have output redirect
      - run: cargo sort --workspace --check >/dev/null

  clippy:
    runs-on: ubuntu-20.04
    needs:
      - "rustfmt"
      - "markdown-lint"
    strategy:
      matrix:
        rust:
          - nightly-2022-07-22
    steps:
      - uses: actions/checkout@v3
      - uses: mobilecoinfoundation/actions/dcap-libs@main
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          components: clippy
          override: true
      - uses: r7kamura/rust-problem-matchers@v1
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all --all-features --locked -- -D warnings

  nono:
    runs-on: ubuntu-20.04
    needs:
      - "rustfmt"
      - "markdown-lint"
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-nono
          version: latest
          use-tool-cache: true
      - uses: r7kamura/rust-problem-matchers@v1
      - run: |
          cargo metadata --no-deps --format-version=1 | \
            jq -r '.packages[].name' | \
            grep -v -e mc-sgx-capable -e mc-sgx-capable-sys -e mc-sgx-core-build -e mc-sgx-core-types -e mc-sgx-dcap-types -e mc-sgx-dcap-quoteverify -e mc-sgx-dcap-quoteverify-sys -e mc-sgx-dcap-ql -e mc-sgx-dcap-ql-sys -e mc-sgx-quote-verify -e mc-sgx-urts | \
            xargs -n1 sh -c 'cargo nono check --package $0 || exit 255'

  build:
    runs-on: ubuntu-20.04
    needs:
      - "rustfmt"
      - "markdown-lint"
    strategy:
      matrix:
        rust:
          - nightly-2022-07-22
    steps:
      - uses: actions/checkout@v3
      - uses: mobilecoinfoundation/actions/sgxsdk@main
      - uses: mobilecoinfoundation/actions/dcap-libs@main
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - uses: r7kamura/rust-problem-matchers@v1
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --locked

  test:
    runs-on: ubuntu-20.04
    needs:
      - "rustfmt"
      - "markdown-lint"
    strategy:
      matrix:
        rust:
          - nightly-2022-07-22
    steps:
      - uses: actions/checkout@v3
      - uses: mobilecoinfoundation/actions/sgxsdk@main
      - uses: mobilecoinfoundation/actions/dcap-libs@main
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - uses: r7kamura/rust-problem-matchers@v1
      - name: Run tests
        # For some reason `SGX_AESM_ADDR` is set to 1 in the github runners.
        # Not seeing it documented here, https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2004-Readme.md
        # We can't just set to 0 or "" as the SGX code looks for it being set, not what the value is :(
        run: unset SGX_AESM_ADDR && cargo test --release --locked --features "sim alloc"

  doc:
    runs-on: ubuntu-20.04
    needs:
      - "rustfmt"
      - "markdown-lint"
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          # FIXME: replace with stable ASAP
          toolchain: nightly-2022-07-22
          override: true
      - uses: r7kamura/rust-problem-matchers@v1
      - uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --release --locked --no-deps --features sim

  coverage:
    runs-on: ubuntu-20.04
    needs:
      - "rustfmt"
      - "markdown-lint"
    steps:
      - uses: actions/checkout@v3
      - uses: mobilecoinfoundation/actions/sgxsdk@main
      - uses: mobilecoinfoundation/actions/dcap-libs@main
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          # FIXME: replace with stable ASAP
          toolchain: nightly-2022-07-22
          override: true
          components: llvm-tools-preview
      - uses: taiki-e/install-action@cargo-llvm-cov
      - name: Run tests with coverage
        # For some reason `SGX_AESM_ADDR` is set to 1 in the github runners.
        # Not seeing it documented here, https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2004-Readme.md
        # We can't just set to 0 or "" as the SGX code looks for it being set, not what the value is :(
        # The FFI bindings crates always report 100% because they have no code
        run: unset SGX_AESM_ADDR && cargo llvm-cov --features sim --ignore-filename-regex '\/sys/src/lib\.rs' --workspace --lcov --output-path lcov.info
      - uses: codecov/codecov-action@v3
        with:
          files: lcov.info

  build-no-alloc:
    runs-on: ubuntu-20.04
    needs:
      - "rustfmt"
      - "markdown-lint"
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - run: rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
      - uses: r7kamura/rust-problem-matchers@v1
      - name: Build types with no alloc crate
        # Some notes on this build command:
        # - The vendored headers are used to get the necessary DCAP headers
        # - The vendored `tlibc` is used to get a compilable `time.h` for the target.
        # - In the unlikely event that `thumbv7m-none-eabi` was installed with rustup, this would error out with
        #   duplicate core symbols due to `-Z build-std=core`.
        run: |
          cargo metadata --no-deps --format-version=1 |  \
            jq -r '.packages[].name' | \
            grep -e types | \
            xargs -n1 sh -c 'CFLAGS="-isystem${GITHUB_WORKSPACE}/core/build/headers -isystem${GITHUB_WORKSPACE}/core/build/headers/tlibc" cargo build -Z build-std=core --target thumbv7m-none-eabi -p $0 || exit 255'

  notify:
    runs-on: ubuntu-latest
    if: failure() && ${{ github.event_name }} == 'push'
    needs:
      - rustfmt
      - markdown-lint
      - sort
      - clippy
      - nono
      - build
      - test
      - doc
      - coverage
      - size-label
    steps:
      - name: Notify Discord on failure
        uses: sarisia/actions-status-discord@v1
        with:
          username: "Github Actions"
          status: Failure
          nodetail: true
          title: "Workflow: ${{ github.workflow }}"
          url: ${{ github.repository_url }}/actions/runs/${{ github.run_id }}
          description: |
            [@${{ github.pusher }}](${{ github.url }}/${{ github.pusher }}] was the last one to touch ${{ github.repository }}, is all I'm saying...
          avatar_url: "https://media0.giphy.com/media/oe33xf3B50fsc/200.gif"
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
