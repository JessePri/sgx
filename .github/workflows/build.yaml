name: rust

on:
  push:
    branches:
      - 'main'
  pull_request:

env:
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "-Dwarnings"

jobs:
  rustfmt:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        rust:
          - nightly-2022-07-22
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  markdown-lint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: xt0rted/markdownlint-problem-matcher@v1
      - name: Install markdown lint
        run: npm install -g markdownlint-cli@0.32.1
      - run: markdownlint --disable 'MD013' "**/*.md"

  deny:
    runs-on: ubuntu-20.04
    needs:
      - "rustfmt"
      - "markdown-lint"
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources
    # Prevent sudden announcement of a new advisory from failing ci:
    continue-on-error: ${{ matrix.checks == 'advisories' }}
    steps:
    - uses: actions/checkout@v2
    - uses: EmbarkStudios/cargo-deny-action@v1
      with:
        command: check ${{ matrix.checks }}

  clippy:
    runs-on: ubuntu-20.04
    needs:
      - "rustfmt"
      - "markdown-lint"
    strategy:
      matrix:
        rust:
          - nightly-2022-07-22
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/dcap-libs
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          components: clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all --all-features --locked -- -D warnings
  nono:
    runs-on: ubuntu-20.04
    needs:
      - "rustfmt"
      - "markdown-lint"
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-nono
          version: latest
          use-tool-cache: true
      - run: |
          cargo metadata --no-deps --format-version=1 | \
            jq -r '.packages[].name' | \
            grep -v -e mc-sgx-capable -e mc-sgx-capable-sys -e mc-sgx-core-build -e mc-sgx-core-types -e mc-sgx-dcap-quoteverify-sys -e mc-sgx-dcap-ql-sys -e mc-sgx-quote-verify -e mc-sgx-urts | \
            xargs -n1 sh -c 'cargo nono check --package $0 || exit 255'
  build:
    runs-on: ubuntu-20.04
    needs:
      - "rustfmt"
      - "markdown-lint"
    strategy:
      matrix:
        rust:
          - nightly-2022-07-22
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/sgxsdk
      - uses: ./.github/actions/dcap-libs
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --locked
  test:
    runs-on: ubuntu-20.04
    needs:
      - "rustfmt"
      - "markdown-lint"
    strategy:
      matrix:
        rust:
          - nightly-2022-07-22
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/sgxsdk
      - uses: ./.github/actions/dcap-libs
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --locked --features sim
  doc:
    runs-on: ubuntu-20.04
    needs:
      - "rustfmt"
      - "markdown-lint"
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/dcap-libs
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --release --locked --no-deps --features sim

  notify:
    runs-on: ubuntu-latest
    if: failure() && ${{ github.event_name }} == 'push'
    needs:
      - rustfmt
      - markdown-lint
      - clippy
      - nono
      - build
      - test
      - doc
    steps:
      - name: Notify Discord on failure
        uses: sarisia/actions-status-discord@v1
        with:
          username: "Github Actions"
          status: Failure
          nodetail: true
          title: "Workflow: ${{ github.workflow }}"
          url: ${{ github.repository_url }}/actions/runs/${{ github.run_id }}
          description: |
            [@${{ github.pusher }}](${{ github.url }}/${{ github.pusher }}] was the last one to touch ${{ github.repository }}, is all I'm saying...
          avatar_url: "https://media0.giphy.com/media/oe33xf3B50fsc/200.gif"
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
